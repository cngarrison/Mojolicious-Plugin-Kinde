name     = Mojolicious-Plugin-Kinde
author   = Charlie Garrison <cng@cngarrison.com>
abstract = A Mojo helper and route condition to extract Kinde auth header, verify JWT token, and return the claims
license  = Perl_5
main_module      = lib/Mojolicious/Plugin/Kinde.pm
copyright_holder = Charlie Garrison
copyright_year   = 2023

[AutoPrereqs]
skip = ^TestsFor

; [@Basic]
[@Filter]
-bundle = @Basic
-remove = GatherDir
; -remove = UploadToCPAN
-remove = License

[MetaJSON]
[GatherDir]
exclude_match = ^.*\.bbprojectd
;[ConfirmRelease] ;; Already part of Basic Filter

[RewriteVersion]

[GithubMeta]
issues = 1
user   = cngarrison
;[@Git]
[Git::Check]
allow_dirty = dist.ini
allow_dirty = Changes
allow_dirty = META.json
allow_dirty_match = README.*
untracked_files = ignore
;[Git::NextVersion]
; [Git::NextVersion::Sanitized]
; first_version = 0.000001
; ; version_regexp  = ^(?:v|release-)(.+)$ 
; version_regexp  = ^(?:v|release-)(.+)(?:-TRIAL)$
; [Git::Commit]
; [Git::CommitBuild]  ; commit the results of the build to a branch that is completely separate from your regular code branches (i.e. with a different root commit).

; commit source files as of "dzil release" with any
; allowable modifications (e.g Changes)
[Git::Commit / Commit_Dirty_Files] ; commit files/Changes (as released)

[Git::Tag]
tag_format = release-%v%t
tag_message = %N v%v%t%nReleased on %d
signed = 1

; [PodWeaver]
[CheckChangeLog]
; [OurPkgVersion]

; update Changes with timestamp of release
[NextRelease]

[BumpVersionAfterRelease]
 
; commit source files after modification
[Git::Commit / Commit_Changes] ; commit Changes (for new dev)
allow_dirty_match = ^lib/
commit_msg = Commit Changes and bump $VERSION

[Git::CommitBuild]  ; commit the results of the build to a branch that is completely separate from your regular code branches (i.e. with a different root commit).

[Signature]

;[CheckExtraTests]
[PodCoverageTests]
[PodSyntaxTests]
;[Test::NoTabs]
[Test::CPAN::Changes]
[Test::DistManifest]
[Test::Pod::LinkCheck]
[Test::ReportPrereqs]
;; the code in the SYNOPSIS is never going to compile as it is anyway
; [Test::Synopsis]
; [Test::UnusedVars]

[Test::Compile]     ; make sure .pm files all compile
fake_home = 1       ; fakes $ENV{HOME} just in case

[TestRelease]       ; ensure t/ tests pass

[Run::Release]
censor_commands = 1
; run = script/myapp_deploy.pl %s
; run = echo "released %s"

[Run::AfterRelease]
run = mv %a ../Mojolicious-Plugin-Kinde-support/releases/ && rm -rf ./%d


[Prereqs]
;perl = 5.010
Mojolicious = 0
Mojo::UserAgent = 0
Mojo::JWT = 0
Mojo::Exception = 0

[ReadmeAnyFromPod / MarkdownInRoot ]
filename = README.md

[Authority]
authority = cpan:CNG
do_munging = 0
 
[MinimumPerl]       ; determine minimum perl version
 
; [MetaNoIndex]       ; sets 'no_index' in META
; directory = t
; ;directory = xt
; ;directory = examples
; ;directory = corpus
; package = DB        ; just in case
;  
; [AutoMetaResources] ; set META resources
; bugtracker.rt      = 0
; bugtracker.github  = user:cngarrison
; repository.github  = user:cngarrison
; homepage           = https://metacpan.org/release/%{dist}
